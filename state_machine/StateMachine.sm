%class StateMachine
%header rm_fsm/StateMachine.h

%include <rm_msgs/DbusData.h>
%include <rm_msgs/TofRadarData.h>
%include <rm_msgs/GameRobotStatus.h>
%include <rm_msgs/GameStatus.h>
%include <sensor_msgs/JointState.h>
%import rm_msgs

%declare #include <rm_msgs/DbusData.h>
%declare #include <rm_msgs/TofRadarData.h>
%declare #include <rm_common/referee/data.h>

%declare using namespace rm_msgs;

%start StateMachineMap::Stop

%map StateMachineMap
%%

// Syntax:
//
// State {
//  TransitionEvent
//      [guard]
//      NextState
//      {Action}
// }

Stop
    Entry {
    info("Stop state entered");
    controller_manager_.stopMainControllers();
    controller_manager_.stopCalibrationControllers();
    }
{
    dbusUpdate(data: const DbusData &)
        [ data.s_r == DbusData::DOWN ]
        Idle
        {
        }
}

Idle
    Entry {
    info("Idle state entered");
    controller_manager_.startMainControllers();
    calibrationReset();
    }
{
    dbusUpdate(data: const DbusData &)
        [ data.s_r == DbusData::MID ]
        Manual
        {
        }
}

Manual
    Entry {
    info("Raw state entered");
    }
{
    dbusUpdate(data: const DbusData &)
        [ data.s_r == DbusData::DOWN ]
        Idle
        {
        }
    dbusUpdate(data: const DbusData &)
        [ data.s_r == DbusData::UP ]
        Cruise
        {
        }
    dbusUpdate(data: const DbusData &)
        nil
        {
            sendChassisCmd(false, data);
        }
}

Cruise
    Entry {
            info("Cruise state entered");
    }
{
    dbusUpdate(data: const DbusData &)
        [ data.s_r == DbusData::MID ]
        Manual
        {
        }
    dbusUpdate(data: const DbusData &)
        nil
        {
            sendChassisCmd(true, data);
        }
    leftRadarCB(data: const TofRadarData &)
        [ data.distance < ctxt.safety_distance_ && ctxt.auto_linear_vel_ > 0 ]
        nil
        {
            catapult();
        }
    rightRadarCB(data: const TofRadarData &)
        [ data.distance < ctxt.safety_distance_ && ctxt.auto_linear_vel_ < 0 ]
        nil
        {
            catapult();
        }
}

Default
{
    dbusUpdate(data: const DbusData &)
        nil
        {
        }
    refereeUpdate(data: const rm_common::RefereeData &)
        nil
        {
        }
    leftRadarCB(data: const TofRadarData &)
        nil
        {
        }
    rightRadarCB(data: const TofRadarData &)
        nil
        {
        }
    checkRc()
        [ ros::Time::now() - ctxt.subscriber_.dbus_.stamp > ros::Duration(0.1) ]
        Stop
        {
            info("Remote controller timeout");
        }
    checkRc()
        nil
        {
        }
}
%%
